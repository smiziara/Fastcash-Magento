<?phprequire_once Mage::getBaseDir('lib')."/Fastcash/Fastcash.php";class Miziagui_Fastcash_Model_Methods_Deposito extends Mage_Payment_Model_Method_Abstract {    const PAYMENT_TYPE_AUTH = 'AUTHORIZATION';    const PAYMENT_TYPE_SALE = 'SALE';    protected $_code = 'fastcash_deposito';    protected $_formBlockType = 'fastcash/form_deposito';    protected $_infoBlockType = 'fastcash/info_deposito';    protected $_allowCurrencyCode = array('BRL', 'USD');    protected $_info = '';      protected $_confirm = array();        /**     * Assign data to info model instance     *     * @param   mixed $data     * @return  Mage_Payment_Model_Info     */    public function assignData($data) {        if (!($data instanceof Varien_Object)) {            $data = new Varien_Object($data);        }        $info = $this->getInfoInstance();        $info->setFastcashDepositoType($data->getFastcashDepositoType());                return $this;    }    /**     * Using internal pages for input payment data     *     * @return bool     */    public function canUseInternal() {        return false;    }    public function getConfig() {        return new Varien_Object(Mage::getStoreConfig('payment/fastcash_deposito'));    }    /**     * Authorize     *     * @param   Varien_Object $orderPayment     * @param float $amount     * @return  Mage_Payment_Model_Abstract     */    public function authorize(Varien_Object $payment, $amount) {    	        //$config = mage::helper('fastcash')->getConfig();        //$auth = mage::helper('fastcash')->getAuthConfig();                $gateway = Mage::getModel('fastcash/order')->load($payment->getOrder()->getId(), 'order_id');        $data = new Varien_Object(unserialize(Mage::helper('core')->decrypt($gateway->getInfo())));        $order = $payment->getOrder();                $customer = Mage::getModel('customer/customer')->load($order->getCustomerId());                $transactionClient = new Fastcash\TransactionClient();                $req = new Fastcash\TransactionRequest();        $req->Transaction->Tid = uniqid('', true);        $req->Transaction->Pid = Fastcash\IntegrationData::Pid;        $req->Transaction->ProdId = Fastcash\IntegrationData::$ProductIds["Default"];        $req->Transaction->ItemDescription = "Magento API 2.0-php";        $req->Transaction->Price = $amount;        $req->Transaction->PaymentMethod = Fastcash\PaymentMethods::Deposit;        $req->Transaction->SubPaymentMethod = $data->getFastcashDepositoType();        $req->Client->Name = $order->getCustomerFirstname().' '.$order->getLastname();        $req->Client->Email = $order->getCustomerEmail();        $req->Client->MobilePhoneNumber = $order->getBillingAddress()->getCellPhone() ? $order->getBillingAddress()->getCellPhone() : $order->getBillingAddress()->getTelephone(); //"011999999999"        $req->Client->Cpf = $customer->getCpf();                $req->ClientTransactionData = null;//new Fastcash\ClientTransactionData();        //$req->ClientTransactionData->BankAgency = $data->getFastcashTransferenciaAg();        //$req->ClientTransactionData->BankAccountNumber = $data->getFastcashTransferenciaCc();                                 $res = $transactionClient->Send($req);        if ($res == null){            Mage::throwException(Mage::helper('fastcash')->__("Transaction Error: " . $transactionClient->Error . ' - ' . "Transaction Error Body: " . $transactionClient->ErrorBody));            return $this;                    } else {            $gateway->setTransactionId($req->Transaction->Tid);            $gateway->setInfo($res->Transaction);                        $confirmation = Zend_Json::decode($res->Confirmation);            $gateway->setFieldCount($confirmation['FieldsCount']);                        if($confirmation['F1']['Name']){                $gateway->setF1Name($confirmation['F1']['Name']);                $gateway->setF1Required($confirmation['F1']['Required']);                $gateway->setF1DataType($confirmation['F1']['DataType']);            }            if($confirmation['F2']['Name']){                $gateway->setF2Name($confirmation['F2']['Name']);                $gateway->setF2Required($confirmation['F2']['Required']);                $gateway->setF2DataType($confirmation['F2']['DataType']);                           }            if($confirmation['F3']['Name']){                $gateway->setF3Name($confirmation['F3']['Name']);                $gateway->setF3Required($confirmation['F3']['Required']);                $gateway->setF3DataType($confirmation['F3']['DataType']);                           }            if($confirmation['F4']['Name']){                $gateway->setF4Name($confirmation['F4']['Name']);                $gateway->setF4Required($confirmation['F4']['Required']);                $gateway->setF4DataType($confirmation['F4']['DataType']);                            }                        $parameters = '[';            foreach($res->Parameters as $p){                $parameters .= $p.',';            }            $parameters = substr_replace($parameters ,"",-1).']';                        $gateway->setParameters($parameters);            $gateway->save();                            }        return $this;    }        public function prepareAuth($order) {        try {            $this->authorize($order->getPayment(), $order->getGrandTotal());            $fastcashPayment = Mage::getModel('fastcash/order')->load($order->getId(), 'order_id');            $fastcashPayment->setStatus(Miziagui_Fastcash_Model_Order::STATUS_CONFIRM);            $fastcashPayment->setUpdatedAt(Mage::getModel('core/date')->date("Y-m-d H:i:s"));            $fastcashPayment->save();        } catch (Exception $e) {            //$this->cancelOrder($order, $e->getMessage());            Mage::log('Erro: Fastcash Deposito - Metodo: prepareAuth - Pedido: '.$order->getId().' - Erro: '.$e->getMessage(),null,'fastcash_error.log');            $this->failureRedirect($e->getMessage());            return false;        }    }        public function cancelOrder($order, $errorMsg) {        $order->cancel()->save();                $fastcashPayment = Mage::getModel('fastcash/order')->load($order->getId(), 'order_id');        //$fastcashPayment->setInfo(null);        $fastcashPayment->setStatus(Mage_Sales_Model_Order::STATE_CANCELED);        $fastcashPayment->setUpdatedAt(Mage::getModel('core/date')->date("Y-m-d H:i:s"));        $fastcashPayment->save();        Mage::log('Erro: Fastcash Transferencia - Metodo: Authorize - Pedido: '.$order->getId().' - Erro: '.$errorMsg,null,'fastcash_error.log');    }    public function failureRedirect($errorMsg) {        $block = Mage::app()->getLayout()->getMessagesBlock();        $block->addError('Ocorreu um erro na transação (' . $errorMsg . ')');        Mage::app()                ->getResponse()                ->setRedirect(Mage::getUrl('fastcash/checkout/failure'));        Mage::app()                ->getResponse()                ->sendResponse();        exit;    }            /**     * Capture     *     * @param   Varien_Object $orderPayment     * @param float $amount     * @return  Mage_Payment_Model_Abstract     */    public function capture(Varien_Object $payment, $amount) {               $confirmationClient = new Fastcash\ConfirmationClient();                $req = new Fastcash\ConfirmationRequest();        $req->Confirmation->Tid = $this->_confirm['tid'];        $req->Confirmation->Pid = Fastcash\IntegrationData::Pid;        $req->Confirmation->ProdId = Fastcash\IntegrationData::$ProductIds["Default"];        if(isset($this->_confirm['F1'])){            $req->Confirmation->F1 = $this->_confirm['F1'];        }else{            $req->Confirmation->F1 = 0;        }        if(isset($this->_confirm['F2'])){            $req->Confirmation->F2 = $this->_confirm['F2'];        }else{            $req->Confirmation->F2 = 0;        }        if(isset($this->_confirm['F3'])){            $req->Confirmation->F3 = $this->_confirm['F3'];        }else{            $req->Confirmation->F3 = 0;        }        if(isset($this->_confirm['F4'])){            $req->Confirmation->F4 = $this->_confirm['F4'];        }else{            $req->Confirmation->F4 = 0;        }        $req->Confirmation->PaidDate = date('Y-m-d H:i:s',strtotime($this->_confirm['paiddate']));        $req->Confirmation->Value = number_format($amount,2,'.','');        $req->Confirmation->Observations = "";              $res = $confirmationClient->Send($req);                if (!$res){            Mage::throwException(Mage::helper('fastcash')->__("Transaction Error: " . $confirmationClient->Error . ' - ' . "Transaction Error Body: " . $confirmationClient->ErrorBody));            return $this;                    }                           return $this;                    }    public function prepareCapture($order, $confirm){        try {            $this->_confirm = $confirm;            $order->getPayment()->getMethodInstance()->capture($order->getPayment(), $order->getGrandTotal());            $fastcashPayment = Mage::getModel('fastcash/order')->load($order->getId(), 'order_id');            $fastcashPayment->setStatus(Miziagui_Fastcash_Model_Order::STATUS_CAPTUREPAYMENT);            $fastcashPayment->save();                                    $block = Mage::app()->getLayout()->getMessagesBlock();            $block->addSuccess('Transação confirmada com sucesso');            return true;       } catch (Exception $e) {            //$this->cancelOrder($order, $e->getMessage());            Mage::log('Erro: Fastcash Deposito - Metodo: prepareCapture - Pedido: '.$order->getId().' - Erro: '.$e->getMessage(),null,'fastcash_error.log');            $this->failureRedirect($e->getMessage());            return false;       }        }     /**     * Using for multiple shipping address     *     * @return bool     */    public function canUseForMultishipping() {        return false;    }    /**     *  check if capture is available     *      * @return bool     */    public function canCapture() {        return true;    }    /**     * Using for multiple shipping address     *     */    public function createFormBlock($name) {        $block = $this->getLayout()->createBlock($this->_formBlockType, $name)                ->setMethod('gwap_deposito')                ->setPayment($this->getPayment())                ->setTemplate('gwap/deposito/form.phtml');        return $block;    }    /**     * Get Fastcash session namespace     *     * @return Miziagui_Fastcash_Model_Session     */    public function getSession() {        return Mage::getSingleton('fastcash/session');    }    /**     * Get checkout session namespace     *     * @return Mage_Checkout_Model_Session     */    public function getCheckout() {        return Mage::getSingleton('checkout/session');    }    /**     * Get current quote     *     * @return Mage_Sales_Model_Quote     */    public function getQuote() {        return $this->getCheckout()->getQuote();    }    /**     * Some process when invoice is created     *      * @param Mage_Sales_Model_Invoice_Payment $payment     * @return Indexa_Gwap_Model_Methods_boleto     */    public function onInvoiceCreate(Mage_Sales_Model_Invoice_Payment $payment) {        return $this;    }    /**     * Some process when order is validated     *      * @param Mage_Sales_Model_Invoice_Payment $payment     * @return Indexa_Gwap_Model_Methods_boleto     */    public function onOrderValidate(Mage_Sales_Model_Order_Payment $payment) {        return $this;    }    /*     * Validate     */    public function validate() {        parent::validate();    }}