<?php
 /**
  * @author Fastcash <cash@fastcash.com.br>
  * @copyright 2012 Fastcash
  * @license MIT
  */
  /*
  * DO NOT MODIFY THIS CLASS. 
  * This class may be updated in the future by us.
  */
namespace Fastcash
{
	/**
	*   DynamicTransaction class implements the Online Dynamic Transaction function. Its a Sender component.
	*/
	class DynamicTransaction extends BaseSender 
	{   
    	/**
		*   The API function that the class is implementing.
		*/
		private $Function = "online-dynamic-transaction";

        /**
		*  The transaction identifier.
		*/
		private $Tid;

		/**
		*   The Fastcash`s Product id, configured at IntegrationData::$ProductIds.
		*/
		private $Prodid;

        /**
		*   The description for this transaction.
		*/
		private $ItemDescription;

        /**
		*   The price of this transaction.
		*/
		private $Price;

        /**
		*   The type of the user of this transaction. Types are defined per contract. Consult us to know the correct values to send.
		*/
		private $UType;

        /**
		*   The custom field. A optional data that we will return to you at Receiver components call.
		*/
		private $Custom;

        /**
        *   The payment method. Pre-selects the payment method for your user. Usefull when you have all our options at your checkout.
        *   If not sent, the user will choose a method at our site.
        *   @see PaymentMethods
        */
		private $Paym;

        /**
        *   The payment method parameter. Each payment method has its own allowed parameters.
        *   @see PaymentMethodsOptions
        */
		private $PaymParam;

        /**
        *   The payment method secondary parameter. Used to specify the parcels for a credit transaction.
        */
		private $SubParam;

        /**
        *   The DataPush instance.
        */
		private $DataPush;

        /**
        *   The html form target generated by GetForm() method and outputed by Send() method.
        *   Default value is "_self".
        */
		private $FormTarget = "_self";

        /**
		*   Constructor. Calls BaseSender constructor.
        *   Needs the minimum required parameters to create a transaction.
        *   @param $tid The transaction identifier.
        *   @param $prodId The Fastcash`s Product id, configured at IntegrationData::$ProductIds.
        *   @param $itemDescription The description for this transaction.
        *   @param $price The price of this transaction.
		*/
		function __construct($tid, $prodId, $itemDescription, $price) {
			parent::__construct();

			$this->Tid = $tid;
			$this->Prodid = $prodId;
			$this->ItemDescription = $itemDescription;
			$this->Price = $price; 
		}

        /**
        *   Main function for the sender components. Sends the call to Fastcash.
        *   Cleans the current buffer and headers, set new headers, and outputs a html form with auto-submit.
        *   @returns true or false
        */
		public function Send()
		{   
			ob_clean();

			header("Content-type: text/html");
            header("Content-encoding: utf-8");
			header("Cache-Control: no-cache, must-revalidate, proxy-revalidate");
			$this->SetAPIHeader();

			echo "<html><body>" . $this->GetForm() . "<script language=\"javascript\">document.frmFastcash.submit();</script></body></html>";

			$size = ob_get_length();

			header("Content-Length: $size");
			header('Connection: close');

			ob_end_flush();
			flush();
			session_write_close();

            return true;
		}

        /**
        *   Gets the Fastcash API Url to create this transaction.
        *   @remarks Ignores the DataPush. To perform a DataPush use the Send() method instead.
        *   @returns The Fastcash API url with all parameters in query string.
        */
		public function GetUrl()
		{
			$pid = IntegrationData::Pid;
			$url = IntegrationData::FastcashAPIUrl;
			$price = number_format($this->Price, 2, ".", "");

			$url .= "?function=" . urlencode($this->Function) . "&tid=" . urlencode($this->Tid) . "&prodid=" . $this->Prodid . "&pid=" . $pid . "&item-description=" . urlencode($this->ItemDescription) . "&price=" . $price ."&quant=1";
			
			if (isset($this->Custom))
			{
				$url .= "&custom=" . urlencode($this->Custom);
			}

			if (isset($this->UType))
			{
				$url .= "&utype=" . $this->UType;
			}

			if (isset($this->Paym))
			{
				$url .= "&paym=" . $this->Paym;
			}

			if (isset($this->PaymParam))
			{
				$param =$this->PaymParam;

				if (isset($this->SubParam))
					$param = $param . ";" . $this->SubParam;

				$url .= "&paym-param=" . urlencode($param);
			}

			return $url;
		}

        /**
        *   Gets a html form with all parameters in hidden inputs and action set to Fastcash API url.
        *   @returns The html form string.
        */
		public function GetForm()
		{
			$pid = IntegrationData::Pid;
			$url = IntegrationData::FastcashAPIUrl;
			$price = number_format($this->Price, 2, ".", "");

			$form = "<form action=\"$url\" method=\"post\" id=\"frmFastcash\" name=\"frmFastcash\" target=\"$this->FormTarget\">
			<input type=\"hidden\" name=\"function\" id=\"function\" value=\"$this->Function\">
			<input type=\"hidden\" name=\"TID\" id=\"TID\" value=\"$this->Tid\">
			<input type=\"hidden\" name=\"PRODID\" id=\"PRODID\" value=\"$this->Prodid\">
			<input type=\"hidden\" name=\"PID\" id=\"PID\" value=\"$pid\">
			<input type=\"hidden\" name=\"Item-Description\" id=\"Item-Description\" value=\"$this->ItemDescription\">
			<input type=\"hidden\" name=\"PRICE\" id=\"PRICE\" value=\"$price\">
			<input type=\"hidden\" name=\"QUANT\" id=\"QUANT\" value=\"1\">";

			if (isset($this->Custom))
			{
				$form .= "<input type=\"hidden\" name=\"custom\" id=\"custom\" value=\"$this->Custom\">";
			}

			if (isset($this->UType))
			{
				$form .= "<input type=\"hidden\" name=\"utype\" id=\"utype\" value=\"$this->UType\">";
			}

			if (isset($this->Paym))
			{
				$form .= "<input type=\"hidden\" name=\"paym\" id=\"paym\" value=\"$this->Paym\">";
			}

			if (isset($this->PaymParam))
			{
				$param = $this->PaymParam;

				if (isset($this->SubParam))
					$param = $param . ";" . $this->SubParam;

				$form .= "<input type=\"hidden\" name=\"paym-param\" id=\"paym-param\" value=\"$param\">";
			}

			if (isset($this->DataPush))
			{
				$xml = $this->DataPush->GetXml();

				$form .= "<input type=\"hidden\" name=\"data\" id=\"data\" value=\"$xml\">";
			}

			$form .= "</form>";

			return $form;
		}

        /**
        *   Creates a DataPush instance with the minimum required user information.
        *   @param $name The user full name.
        *   @param $email The user main and valid email address.
        *   @param $cpf The user CPF.
        *   @returns The DataPush instance reference.
        */
		public function &CreateDataPush($name, $email, $cpf)
		{
			$push = new DataPush($name, $email, $cpf);

			$this->SetDataPush($push);

			return $push;
		}

        /**
        *   Sets a DataPush instance created directly by instantiating the DataPush class.
        *   @param $dataPush A DataPush instance.
        */
		public function SetDataPush($dataPush)
		{
			if ($dataPush instanceof DataPush)
				$this->DataPush = $dataPush;
		}

        /**
        *   Sets the user type.
        *   @param $uType The user type.
        */
		public function SetUserType($uType)
		{
			if (is_integer($uType) || is_numeric($uType))
			{
				$this->UType = $uType;
			}
		}

        /**
        *   Sets the custom field.
        *   @param $custom The custom value.
        */
		public function SetCustom($custom)
		{
			$this->Custom = trim($custom);
		}

        /**
        *   Sets the payment method.
        *   @param $paym A valid payment method, listed at PaymentMethods class.
        *   @param $paymParam A valid payment method option, listed at PaymentMethodsOptions class.
        *   @param $subParam A secondary parameter, used to set the parcel with credit transaction.
        *   @returns false if the parameters are invalid.
        */
		public function SetPaymentMethod($paym, $paymParam, $subParam = null)
		{
			if (is_integer($paym))
			{
				switch($paym)
				{
					case PaymentMethods::Deposit:
					{
						if ($paymParam < 0 || $paymParam > (count(PaymentMethodsOptions::$Deposit)-1))
						{
							return false;
						}

						break;
					}
					case PaymentMethods::Transference:
					{
						if ($paymParam < 0 || $paymParam > (count(PaymentMethodsOptions::$Transference)-1))
						{
							return false;
						}

						break;
					}	
					case PaymentMethods::Telephone:
					{
						if ($paymParam < 0 || $paymParam > (count(PaymentMethodsOptions::$Telephone)-1))
						{
							return false;
						}

						break;
					}
					case PaymentMethods::Credit:
					{
						if ($paymParam < 0 || $paymParam > (count(PaymentMethodsOptions::$Credit)-1) || $subParam == null || $subParam <= 0 || $subParam > 12)
						{
							return false;
						}

						break;
					}		
				}

				$this->Paym = $paym;
				$this->PaymParam = $paymParam;
				$this->SubParam = $subParam;
			}
		}

        /**
        *   Sets the html form target generated by GetForm() method and outputed by Send() method.
        *   @param $target The html form target.
        */
		public function SetFormTarget($target)
		{
			$this->FormTarget = target;
		}

        /**
        *   Validates the instance fields.
        */
		public function Validate()
		{
			return true;
		}

        /**
        *   Invokes the callback function.
        */
		public function InvokeCallback()
		{
			return false;
		}
	}
}
?>